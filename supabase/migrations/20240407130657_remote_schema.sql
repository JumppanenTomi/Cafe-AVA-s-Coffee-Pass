
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."app_role" AS ENUM (
    'owner',
    'barista',
    'client'
);

ALTER TYPE "public"."app_role" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."custom_access_token_hook"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plpgsql" IMMUTABLE
    AS $$
  declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Check if the user is marked as admin in the profiles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$$;

ALTER FUNCTION "public"."custom_access_token_hook"("event" "jsonb") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."stamp_logs" (
    "stamp_log_id" integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "user_id" "uuid" NOT NULL,
    "is_used" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."stamp_logs" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."stamp_logs_stamp_log_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."stamp_logs_stamp_log_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."stamp_logs_stamp_log_id_seq" OWNED BY "public"."stamp_logs"."stamp_log_id";

CREATE TABLE IF NOT EXISTS "public"."temp_codes" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "code" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "used" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."temp_codes" OWNER TO "postgres";

ALTER TABLE "public"."temp_codes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."temp_codes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "role" "public"."app_role" NOT NULL,
    "email" character varying NOT NULL,
    "last_sign_in_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text")
);

ALTER TABLE "public"."user_roles" OWNER TO "postgres";

COMMENT ON TABLE "public"."user_roles" IS 'Application roles for each user.';

COMMENT ON COLUMN "public"."user_roles"."email" IS 'user_email';

ALTER TABLE "public"."user_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."voucher_logs" (
    "voucher_log_id" integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    "user_id" "uuid" NOT NULL,
    "voucher_id" integer NOT NULL
);

ALTER TABLE "public"."voucher_logs" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."voucher_logs_voucher_log_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."voucher_logs_voucher_log_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."voucher_logs_voucher_log_id_seq" OWNED BY "public"."voucher_logs"."voucher_log_id";

CREATE TABLE IF NOT EXISTS "public"."vouchers" (
    "voucher_id" integer NOT NULL,
    "name" character varying(50) NOT NULL,
    "description" character varying(500),
    "start_date" "date" NOT NULL,
    "end_date" "date" NOT NULL,
    "uses_per_user" integer,
    "stamps_required" integer NOT NULL
);

ALTER TABLE "public"."vouchers" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."vouchers_voucher_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."vouchers_voucher_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."vouchers_voucher_id_seq" OWNED BY "public"."vouchers"."voucher_id";

ALTER TABLE ONLY "public"."stamp_logs" ALTER COLUMN "stamp_log_id" SET DEFAULT "nextval"('"public"."stamp_logs_stamp_log_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."voucher_logs" ALTER COLUMN "voucher_log_id" SET DEFAULT "nextval"('"public"."voucher_logs_voucher_log_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."vouchers" ALTER COLUMN "voucher_id" SET DEFAULT "nextval"('"public"."vouchers_voucher_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."stamp_logs"
    ADD CONSTRAINT "stamp_logs_pkey" PRIMARY KEY ("stamp_log_id");

ALTER TABLE ONLY "public"."temp_codes"
    ADD CONSTRAINT "temp_codes_code_key" UNIQUE ("code");

ALTER TABLE ONLY "public"."temp_codes"
    ADD CONSTRAINT "temp_codes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_role_key" UNIQUE ("user_id", "role");

ALTER TABLE ONLY "public"."voucher_logs"
    ADD CONSTRAINT "voucher_logs_pkey" PRIMARY KEY ("voucher_log_id");

ALTER TABLE ONLY "public"."vouchers"
    ADD CONSTRAINT "vouchers_pkey" PRIMARY KEY ("voucher_id");

ALTER TABLE ONLY "public"."temp_codes"
    ADD CONSTRAINT "public_temp_codes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "public_user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."stamp_logs"
    ADD CONSTRAINT "stamp_logs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."voucher_logs"
    ADD CONSTRAINT "voucher_logs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."voucher_logs"
    ADD CONSTRAINT "voucher_logs_voucher_id_fkey" FOREIGN KEY ("voucher_id") REFERENCES "public"."vouchers"("voucher_id");

CREATE POLICY "Allow auth admin to read user roles" ON "public"."user_roles" FOR SELECT TO "supabase_auth_admin" USING (true);

CREATE POLICY "Allow users that have the owner role all access to user_roles t" ON "public"."user_roles" AS RESTRICTIVE TO "authenticated" USING ((("auth"."uid"() = "user_id") AND ("role" = 'owner'::"public"."app_role"))) WITH CHECK ((("auth"."uid"() = "user_id") AND ("role" = 'owner'::"public"."app_role")));

CREATE POLICY "Enable all access if the user has the owner role" ON "public"."stamp_logs" TO "authenticated" USING (("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'owner'::"public"."app_role")))) WITH CHECK (("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'owner'::"public"."app_role"))));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."stamp_logs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."temp_codes" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."vouchers" FOR SELECT USING (true);

CREATE POLICY "Enable read access for users based on user id" ON "public"."stamp_logs" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable read access for users based on user id" ON "public"."temp_codes" FOR SELECT USING (("auth"."uid"() = "user_id"));

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."stamp_logs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."voucher_logs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."vouchers";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "service_role";
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "supabase_auth_admin";

GRANT ALL ON TABLE "public"."stamp_logs" TO "anon";
GRANT ALL ON TABLE "public"."stamp_logs" TO "authenticated";
GRANT ALL ON TABLE "public"."stamp_logs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."stamp_logs_stamp_log_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."stamp_logs_stamp_log_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."stamp_logs_stamp_log_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."temp_codes" TO "anon";
GRANT ALL ON TABLE "public"."temp_codes" TO "authenticated";
GRANT ALL ON TABLE "public"."temp_codes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."temp_codes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."temp_codes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."temp_codes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_roles" TO "service_role";
GRANT ALL ON TABLE "public"."user_roles" TO "supabase_auth_admin";

GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."voucher_logs" TO "anon";
GRANT ALL ON TABLE "public"."voucher_logs" TO "authenticated";
GRANT ALL ON TABLE "public"."voucher_logs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."voucher_logs_voucher_log_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."voucher_logs_voucher_log_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."voucher_logs_voucher_log_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."vouchers" TO "anon";
GRANT ALL ON TABLE "public"."vouchers" TO "authenticated";
GRANT ALL ON TABLE "public"."vouchers" TO "service_role";

GRANT ALL ON SEQUENCE "public"."vouchers_voucher_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."vouchers_voucher_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."vouchers_voucher_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
