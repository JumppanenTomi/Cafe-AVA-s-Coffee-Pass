drop policy "Enable access to everything for users with the owner or barista" on "public"."voucher_logs";

drop policy "Enable read access to all authenticated users" on "public"."voucher_logs";

drop policy "Allow users with the owner or barista role access to everything" on "public"."vouchers";

drop policy "Enable read access for all users" on "public"."vouchers";

revoke delete on table "public"."voucher_logs" from "anon";

revoke insert on table "public"."voucher_logs" from "anon";

revoke references on table "public"."voucher_logs" from "anon";

revoke select on table "public"."voucher_logs" from "anon";

revoke trigger on table "public"."voucher_logs" from "anon";

revoke truncate on table "public"."voucher_logs" from "anon";

revoke update on table "public"."voucher_logs" from "anon";

revoke delete on table "public"."voucher_logs" from "authenticated";

revoke insert on table "public"."voucher_logs" from "authenticated";

revoke references on table "public"."voucher_logs" from "authenticated";

revoke select on table "public"."voucher_logs" from "authenticated";

revoke trigger on table "public"."voucher_logs" from "authenticated";

revoke truncate on table "public"."voucher_logs" from "authenticated";

revoke update on table "public"."voucher_logs" from "authenticated";

revoke delete on table "public"."voucher_logs" from "service_role";

revoke insert on table "public"."voucher_logs" from "service_role";

revoke references on table "public"."voucher_logs" from "service_role";

revoke select on table "public"."voucher_logs" from "service_role";

revoke trigger on table "public"."voucher_logs" from "service_role";

revoke truncate on table "public"."voucher_logs" from "service_role";

revoke update on table "public"."voucher_logs" from "service_role";

revoke delete on table "public"."vouchers" from "anon";

revoke insert on table "public"."vouchers" from "anon";

revoke references on table "public"."vouchers" from "anon";

revoke select on table "public"."vouchers" from "anon";

revoke trigger on table "public"."vouchers" from "anon";

revoke truncate on table "public"."vouchers" from "anon";

revoke update on table "public"."vouchers" from "anon";

revoke delete on table "public"."vouchers" from "authenticated";

revoke insert on table "public"."vouchers" from "authenticated";

revoke references on table "public"."vouchers" from "authenticated";

revoke select on table "public"."vouchers" from "authenticated";

revoke trigger on table "public"."vouchers" from "authenticated";

revoke truncate on table "public"."vouchers" from "authenticated";

revoke update on table "public"."vouchers" from "authenticated";

revoke delete on table "public"."vouchers" from "service_role";

revoke insert on table "public"."vouchers" from "service_role";

revoke references on table "public"."vouchers" from "service_role";

revoke select on table "public"."vouchers" from "service_role";

revoke trigger on table "public"."vouchers" from "service_role";

revoke truncate on table "public"."vouchers" from "service_role";

revoke update on table "public"."vouchers" from "service_role";

alter table "public"."voucher_logs" drop constraint "voucher_logs_user_id_fkey";

alter table "public"."voucher_logs" drop constraint "voucher_logs_voucher_id_fkey";

alter table "public"."voucher_logs" drop constraint "voucher_logs_pkey";

alter table "public"."vouchers" drop constraint "vouchers_pkey";

drop index if exists "public"."voucher_logs_pkey";

drop index if exists "public"."vouchers_pkey";

drop table "public"."voucher_logs";

drop table "public"."vouchers";

create table "public"."all_vouchers" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "used" integer default 0,
    "user_id" uuid,
    "active" boolean,
    "voucher_type" bigint,
    "start" timestamp without time zone default now(),
    "end" timestamp without time zone
);


alter table "public"."all_vouchers" enable row level security;

create table "public"."public_voucher_logs" (
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "public_voucher_id" bigint,
    "used_per_user" integer default 0,
    "id" bigint generated by default as identity not null
);


create table "public"."public_vouchers" (
    "created_at" timestamp with time zone not null default now(),
    "voucher_id" bigint,
    "id" bigint generated by default as identity not null,
    "used" bigint,
    "start" timestamp without time zone,
    "end" timestamp without time zone
);


create table "public"."site_settings" (
    "id" bigint generated by default as identity not null,
    "key" character varying not null,
    "value" character varying,
    "readableName" text not null,
    "desc" text
);


create table "public"."voucher_type" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying,
    "description" character varying,
    "redeem_message" character varying,
    "uses_per_voucher" integer
);


alter table "public"."stamp_logs" disable row level security;

alter table "public"."user_roles" disable row level security;

drop sequence if exists "public"."voucher_logs_voucher_log_id_seq";

drop sequence if exists "public"."vouchers_voucher_id_seq";

CREATE UNIQUE INDEX private_voucher_pkey ON public.all_vouchers USING btree (id);

CREATE UNIQUE INDEX public_voucher_logs_new_id_key ON public.public_voucher_logs USING btree (id);

CREATE UNIQUE INDEX public_voucher_logs_pkey ON public.public_voucher_logs USING btree (id);

CREATE UNIQUE INDEX public_vouchers_new_id_key ON public.public_vouchers USING btree (id);

CREATE UNIQUE INDEX public_vouchers_pkey ON public.public_vouchers USING btree (id);

CREATE UNIQUE INDEX site_settings_key_key ON public.site_settings USING btree (key);

CREATE UNIQUE INDEX site_settings_pkey ON public.site_settings USING btree (id);

CREATE UNIQUE INDEX voucher_type_pkey ON public.voucher_type USING btree (id);

alter table "public"."all_vouchers" add constraint "private_voucher_pkey" PRIMARY KEY using index "private_voucher_pkey";

alter table "public"."public_voucher_logs" add constraint "public_voucher_logs_pkey" PRIMARY KEY using index "public_voucher_logs_pkey";

alter table "public"."public_vouchers" add constraint "public_vouchers_pkey" PRIMARY KEY using index "public_vouchers_pkey";

alter table "public"."site_settings" add constraint "site_settings_pkey" PRIMARY KEY using index "site_settings_pkey";

alter table "public"."voucher_type" add constraint "voucher_type_pkey" PRIMARY KEY using index "voucher_type_pkey";

alter table "public"."all_vouchers" add constraint "public_private_voucher_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."all_vouchers" validate constraint "public_private_voucher_user_id_fkey";

alter table "public"."all_vouchers" add constraint "public_private_voucher_voucher_type_fkey" FOREIGN KEY (voucher_type) REFERENCES voucher_type(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."all_vouchers" validate constraint "public_private_voucher_voucher_type_fkey";

alter table "public"."public_voucher_logs" add constraint "public_public_voucher_logs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."public_voucher_logs" validate constraint "public_public_voucher_logs_user_id_fkey";

alter table "public"."public_voucher_logs" add constraint "public_voucher_logs_new_id_key" UNIQUE using index "public_voucher_logs_new_id_key";

alter table "public"."public_voucher_logs" add constraint "public_voucher_logs_public_voucher_id_fkey" FOREIGN KEY (public_voucher_id) REFERENCES public_vouchers(id) not valid;

alter table "public"."public_voucher_logs" validate constraint "public_voucher_logs_public_voucher_id_fkey";

alter table "public"."public_vouchers" add constraint "public_vouchers_new_id_key" UNIQUE using index "public_vouchers_new_id_key";

alter table "public"."public_vouchers" add constraint "public_vouchers_voucher_id_fkey" FOREIGN KEY (voucher_id) REFERENCES voucher_type(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."public_vouchers" validate constraint "public_vouchers_voucher_id_fkey";

alter table "public"."site_settings" add constraint "site_settings_key_key" UNIQUE using index "site_settings_key_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_user_roles_for_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.user_roles(user_id, role, email)
  values(new.id, 'client', new.email);

  return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.delete_temp_codes_rows()
 RETURNS void
 LANGUAGE sql
AS $function$
  TRUNCATE TABLE temp_codes
$function$
;

CREATE OR REPLACE FUNCTION public.increment_private_voucher(p_voucher_id uuid)
 RETURNS void
 LANGUAGE plpgsql
AS $function$BEGIN
    UPDATE all_vouchers
    SET used = used + 1
    WHERE id = p_voucher_id;
END;$function$
;

CREATE OR REPLACE FUNCTION public.increment_public_voucher(p_voucher_id integer, p_user_id uuid)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Check if the record exists
    IF EXISTS (
        SELECT 1
        FROM public_voucher_logs
        WHERE public_voucher_id = p_voucher_id AND user_id = p_user_id
    ) THEN
        -- Update existing record
        UPDATE public_voucher_logs
        SET used_per_user = used_per_user + 1
        WHERE public_voucher_id = p_voucher_id AND user_id = p_user_id;
    ELSE
        -- Insert new record
        INSERT INTO public_voucher_logs (public_voucher_id, user_id, used_per_user)
        VALUES (p_voucher_id, p_user_id, 1);
    END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event jsonb)
 RETURNS jsonb
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
  declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Check if the user is marked as admin in the profiles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$function$
;

grant delete on table "public"."all_vouchers" to "anon";

grant insert on table "public"."all_vouchers" to "anon";

grant references on table "public"."all_vouchers" to "anon";

grant select on table "public"."all_vouchers" to "anon";

grant trigger on table "public"."all_vouchers" to "anon";

grant truncate on table "public"."all_vouchers" to "anon";

grant update on table "public"."all_vouchers" to "anon";

grant delete on table "public"."all_vouchers" to "authenticated";

grant insert on table "public"."all_vouchers" to "authenticated";

grant references on table "public"."all_vouchers" to "authenticated";

grant select on table "public"."all_vouchers" to "authenticated";

grant trigger on table "public"."all_vouchers" to "authenticated";

grant truncate on table "public"."all_vouchers" to "authenticated";

grant update on table "public"."all_vouchers" to "authenticated";

grant delete on table "public"."all_vouchers" to "service_role";

grant insert on table "public"."all_vouchers" to "service_role";

grant references on table "public"."all_vouchers" to "service_role";

grant select on table "public"."all_vouchers" to "service_role";

grant trigger on table "public"."all_vouchers" to "service_role";

grant truncate on table "public"."all_vouchers" to "service_role";

grant update on table "public"."all_vouchers" to "service_role";

grant delete on table "public"."public_voucher_logs" to "anon";

grant insert on table "public"."public_voucher_logs" to "anon";

grant references on table "public"."public_voucher_logs" to "anon";

grant select on table "public"."public_voucher_logs" to "anon";

grant trigger on table "public"."public_voucher_logs" to "anon";

grant truncate on table "public"."public_voucher_logs" to "anon";

grant update on table "public"."public_voucher_logs" to "anon";

grant delete on table "public"."public_voucher_logs" to "authenticated";

grant insert on table "public"."public_voucher_logs" to "authenticated";

grant references on table "public"."public_voucher_logs" to "authenticated";

grant select on table "public"."public_voucher_logs" to "authenticated";

grant trigger on table "public"."public_voucher_logs" to "authenticated";

grant truncate on table "public"."public_voucher_logs" to "authenticated";

grant update on table "public"."public_voucher_logs" to "authenticated";

grant delete on table "public"."public_voucher_logs" to "service_role";

grant insert on table "public"."public_voucher_logs" to "service_role";

grant references on table "public"."public_voucher_logs" to "service_role";

grant select on table "public"."public_voucher_logs" to "service_role";

grant trigger on table "public"."public_voucher_logs" to "service_role";

grant truncate on table "public"."public_voucher_logs" to "service_role";

grant update on table "public"."public_voucher_logs" to "service_role";

grant delete on table "public"."public_vouchers" to "anon";

grant insert on table "public"."public_vouchers" to "anon";

grant references on table "public"."public_vouchers" to "anon";

grant select on table "public"."public_vouchers" to "anon";

grant trigger on table "public"."public_vouchers" to "anon";

grant truncate on table "public"."public_vouchers" to "anon";

grant update on table "public"."public_vouchers" to "anon";

grant delete on table "public"."public_vouchers" to "authenticated";

grant insert on table "public"."public_vouchers" to "authenticated";

grant references on table "public"."public_vouchers" to "authenticated";

grant select on table "public"."public_vouchers" to "authenticated";

grant trigger on table "public"."public_vouchers" to "authenticated";

grant truncate on table "public"."public_vouchers" to "authenticated";

grant update on table "public"."public_vouchers" to "authenticated";

grant delete on table "public"."public_vouchers" to "service_role";

grant insert on table "public"."public_vouchers" to "service_role";

grant references on table "public"."public_vouchers" to "service_role";

grant select on table "public"."public_vouchers" to "service_role";

grant trigger on table "public"."public_vouchers" to "service_role";

grant truncate on table "public"."public_vouchers" to "service_role";

grant update on table "public"."public_vouchers" to "service_role";

grant delete on table "public"."site_settings" to "anon";

grant insert on table "public"."site_settings" to "anon";

grant references on table "public"."site_settings" to "anon";

grant select on table "public"."site_settings" to "anon";

grant trigger on table "public"."site_settings" to "anon";

grant truncate on table "public"."site_settings" to "anon";

grant update on table "public"."site_settings" to "anon";

grant delete on table "public"."site_settings" to "authenticated";

grant insert on table "public"."site_settings" to "authenticated";

grant references on table "public"."site_settings" to "authenticated";

grant select on table "public"."site_settings" to "authenticated";

grant trigger on table "public"."site_settings" to "authenticated";

grant truncate on table "public"."site_settings" to "authenticated";

grant update on table "public"."site_settings" to "authenticated";

grant delete on table "public"."site_settings" to "service_role";

grant insert on table "public"."site_settings" to "service_role";

grant references on table "public"."site_settings" to "service_role";

grant select on table "public"."site_settings" to "service_role";

grant trigger on table "public"."site_settings" to "service_role";

grant truncate on table "public"."site_settings" to "service_role";

grant update on table "public"."site_settings" to "service_role";

grant delete on table "public"."user_roles" to "authenticated";

grant insert on table "public"."user_roles" to "authenticated";

grant references on table "public"."user_roles" to "authenticated";

grant select on table "public"."user_roles" to "authenticated";

grant trigger on table "public"."user_roles" to "authenticated";

grant truncate on table "public"."user_roles" to "authenticated";

grant update on table "public"."user_roles" to "authenticated";

grant delete on table "public"."voucher_type" to "anon";

grant insert on table "public"."voucher_type" to "anon";

grant references on table "public"."voucher_type" to "anon";

grant select on table "public"."voucher_type" to "anon";

grant trigger on table "public"."voucher_type" to "anon";

grant truncate on table "public"."voucher_type" to "anon";

grant update on table "public"."voucher_type" to "anon";

grant delete on table "public"."voucher_type" to "authenticated";

grant insert on table "public"."voucher_type" to "authenticated";

grant references on table "public"."voucher_type" to "authenticated";

grant select on table "public"."voucher_type" to "authenticated";

grant trigger on table "public"."voucher_type" to "authenticated";

grant truncate on table "public"."voucher_type" to "authenticated";

grant update on table "public"."voucher_type" to "authenticated";

grant delete on table "public"."voucher_type" to "service_role";

grant insert on table "public"."voucher_type" to "service_role";

grant references on table "public"."voucher_type" to "service_role";

grant select on table "public"."voucher_type" to "service_role";

grant trigger on table "public"."voucher_type" to "service_role";

grant truncate on table "public"."voucher_type" to "service_role";

grant update on table "public"."voucher_type" to "service_role";

create policy "Allow user to select active vouchers that belong to them"
on "public"."all_vouchers"
as permissive
for select
to authenticated
using (((auth.uid() = user_id) AND (active = true)));


create policy "Allow users with the owner or barista role access to everything"
on "public"."all_vouchers"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'user_role'::text) = ANY (ARRAY['owner'::text, 'barista'::text])))
with check (((auth.jwt() ->> 'user_role'::text) = ANY (ARRAY['owner'::text, 'barista'::text])));


create policy "Allow user with barista or owner role access to everything"
on "public"."voucher_type"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'user_role'::text) = ANY (ARRAY['owner'::text, 'barista'::text])))
with check (((auth.jwt() ->> 'user_role'::text) = ANY (ARRAY['owner'::text, 'barista'::text])));



create schema if not exists "vouchers";


